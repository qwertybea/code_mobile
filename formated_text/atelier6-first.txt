# Énumération GCommande

public enum GCommande {

    CHOISIR_HAUTEUR,
    CHOISIR_LARGEUR,
    CHOISIR_POUR_GAGNER,

    OUVRIR_MENU_PARAMETRES,

---------------
# Classe Action

public class Action {

    Fournisseur fournisseur;

    ListenerFournisseur listenerFournisseur;

    Object[] args;

    public void setArguments(Object... args) {

    public void executerDesQuePossible(){

---------------
# Interface Fournisseur

public interface Fournisseur {

---------------
# Interface ListenerFournisseur

public interface ListenerFournisseur {

    void executer(Object... args);

---------------
# Classe ControleurAction

public class ControleurAction {

    private static Map<GCommande, Action> actions;
    private static Set<Action> fileAttenteExecution;

    static {

        /* TRUC: initialiser le Map actions comme suit:
        *          - pour chaque GCommande
        *               - insérer une action vide
        *
        * (l'avantage est qu'ensuite on a plus à tester si
        *  une GCommande est dans le Map... elles y sont toutes!)
        */


        /* BONUS: pour le Set fileAttenteExecution, il existe 
        *        une implémentation de Set qui préserve l'ordre 
        *        d'insertion... c'est celle-là qu'on veut! 
        * 
        * (double bonus: pourquoi?)
        */
    }


    public static Action demanderAction(GCommande commande)


    public static void fournirAction(Fournisseur fournisseur, GCommande commande, ListenerFournisseur listenerFournisseur)
        /*
         * En plus d'enregistrer le fournisseur
         * On doit vérifier si l'ajout du fournisseur a rendu une action en file d'attente exécutable
         * 
         */


    static void executerDesQuePossible(Action action)


    private static void executerActionsExecutables()
        /* 
         * Avant d'exécuter l'action:
         *     - l'enlever de la file d'attente
         *
         * Après avoir éxécuté l'action:
         *     - lancer l'observation du fournisseur de cette action (si possible)
         *
         */

    static boolean siActionExecutable(Action action)

    private static void lancerObservationSiApplicable(Action action)

    private static synchronized void executerMaintenant(Action action)
        /*
         * BONUS: à quoi sert le synchronized?
         *
         */


    private static void enregistrerFournisseur(Fournisseur fournisseur, GCommande commande, ListenerFournisseur listenerFournisseur)

    private static void ajouterActionEnFileDAttente(Action action)


---------------
# Classe ControleurObservation

public class ControleurObservation {

    private static Map<Modele, ListenerObservateur> observations;

    static {

    }


    public static void observerModele(String nomModele, final ListenerObservateur listenerObservateur)
        /*
         *   - on enregistre le listener dans le Map observations
         *   - on lance l'observation une première fois quand on reçoit le listener
         *
         *   Note: pour l'instant il y a un seul modèle, le nomModele est ignoré (FIXME atelier07!)
         *
         *   BONUS: pourquoi le modèle est identifié par son nom? (et pas son objet comme dans le Map?)
         *
         */

    public static void lancerObservation(Modele modele)
        /*
         * sera appelé par le ControleurAction après une action!
         *
         */

---------------
# Interface ListenerObservateur

public interface ListenerObservateur {

    void reagirChangementAuModele(Modele modele);

---------------
# Exception ErreurAction

public class ErreurAction extends RuntimeException {

    public ErreurAction(String message)

    public ErreurAction(Exception e)

---------------
# Exception ErreurObservation

public class ErreurObservation extends RuntimeException {

    public ErreurObservation(Exception e)

    public ErreurObservation(String message)

---------------
# Action: exécuter dès que possible

Action actionHauteur = ControleurAction.demanderAction(GCommande.CHOISIR_HAUTEUR);

// Une fois qu'on connais le choix de l'usager
actionHauteur.setArguments(leChoix);
actionHauteur.executerDesQuePossible();

---------------
ControleurAction.fournirAction(this,
        GCommande.CHOISIR_HAUTEUR,
        new ListenerFournisseur() {
            @Override
            public void executer(Object... args) {
    
                setHauteur((int) args[0]);
            }

        });
---------------
# Observateur: réagir au changement

ControleurObservation.observerModele(MParametres.class.getSimpleName(),
        new ListenerObservateur() {

            @Override
            public void reagirChangementAuModele(Modele modele) {

                afficherParametres((MParametres) modele);
            }
        });
---------------
# Listener: promesse d'exécution

ControleurObservation.observerModele(MParametres.class.getSimpleName(),

        // Quand ça sera le temps, je promets d'observer le modèle
        new ListenerObservateur() {

            @Override
            public void reagirChangementAuModele(Modele modele) {

                afficherParametres((MParametres) modele);
            }
        });
---------------
// Le modèle a changé, c'est le temps d'observer!
listenerObservateur.reagirNouveauModele(modele);
---------------
